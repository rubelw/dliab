web:
  ########################################
  ## FILE | webserver_config.py
  ########################################
  ##
  webserverConfig:
    ## if the `webserver_config.py` file is mounted
    ## - set to false if you wish to mount your own `webserver_config.py` file
    ##
    enabled: true

    ## the full content of the `webserver_config.py` file (as a string)
    ## - docs for Flask-AppBuilder security configs:
    ##   https://flask-appbuilder.readthedocs.io/en/latest/security.html
    ##
    ## ____ EXAMPLE _______________
    ##   stringOverride: |
    ##     from airflow import configuration as conf
    ##     from flask_appbuilder.security.manager import AUTH_DB
    ##
    ##     # the SQLAlchemy connection string
    ##     SQLALCHEMY_DATABASE_URI = conf.get('core', 'SQL_ALCHEMY_CONN')
    ##
    ##     # use embedded DB for auth
    ##     AUTH_TYPE = AUTH_DB
    ##
    stringOverride: |
      from flask_appbuilder.security.manager import AUTH_LDAP

      # only needed for airflow 1.10
      #from airflow import configuration as conf
      #SQLALCHEMY_DATABASE_URI = conf.get("core", "SQL_ALCHEMY_CONN")

      AUTH_TYPE = AUTH_LDAP
      AUTH_LDAP_SERVER = "ldap://openldap-chart.default.svc.cluster.local"
      AUTH_LDAP_USE_TLS = False

      # registration configs
      AUTH_USER_REGISTRATION = True  # allow users who are not already in the FAB DB
      AUTH_USER_REGISTRATION_ROLE = "Public"  # this role will be given in addition to any AUTH_ROLES_MAPPING
      AUTH_LDAP_FIRSTNAME_FIELD = "givenName"
      AUTH_LDAP_LASTNAME_FIELD = "sn"
      AUTH_LDAP_EMAIL_FIELD = "mail"  # if null in LDAP, email is set to: "{username}@email.notfound"

      # search configs
      AUTH_LDAP_SEARCH = "ou=users,dc=sirius,dc=com"  # the LDAP search base
      AUTH_LDAP_UID_FIELD = "uid"  # the username field
      AUTH_LDAP_BIND_USER = "cn=admin,dc=sirius,dc=com"  # the special bind username for search
      AUTH_LDAP_BIND_PASSWORD = "passw0rd"  # the special bind password for search

      # a mapping from LDAP DN to a list of FAB roles
      AUTH_ROLES_MAPPING = {
          "cn=operations,ou=groups,dc=sirius,dc=com": ["User"],
          "cn=admin,ou=groups,dc=sirius,dc=com": ["Admin"],
      }



      # the LDAP user attribute which has their role DNs
      AUTH_LDAP_GROUP_FIELD = "memberOf"

      # if we should replace ALL the user's roles each login, or only on registration
      AUTH_ROLES_SYNC_AT_LOGIN = True

      # force users to re-auth after 30min of inactivity (to keep roles in sync)
      PERMANENT_SESSION_LIFETIME = 1800

